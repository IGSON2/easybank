// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO
    users (
        username,
        hashed_password,
        full_name,
        email
    )
VALUES
    (?, ?, ?, ?)
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
}

const getLastUser = `-- name: GetLastUser :one
SELECT
    username, hashed_password, full_name, email, password_changed_at, created_at
FROM
    users
ORDER BY
    created_at DESC
LIMIT
    1
`

func (q *Queries) GetLastUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getLastUser)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRandomUser = `-- name: GetRandomUser :one
SELECT 
    username, hashed_password, full_name, email, password_changed_at, created_at
FROM
    users
ORDER BY
    RAND()
LIMIT
    1
`

func (q *Queries) GetRandomUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getRandomUser)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    username, hashed_password, full_name, email, password_changed_at, created_at
FROM
    users
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
